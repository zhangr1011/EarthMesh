Makefile                         编译与文件链接关系
Makeoptions                      编译选项文件
make.sh                          F90文件编译
blas.F90                         blas库
consts_coms.F90                  存储模型参数
icosahedron.F90                  生成初始全球准均匀网格（已经弹性调整）
lapack.F90                       lapack库

! 主要coding集中在下列F90文件中，且仅对本人coding部分进行介绍
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
mkgrd.F90                        主程序
MOD_Area_judge.F90               经纬度网格是否用于计算的前处理
MOD_data_preprocess.F90          初始数据读取
MOD_file_preprocess.F90          网格文件，包含关系的读取与保存
MOD_GetContain.F90               计算非结构网格与结构网格的包含关系
MOD_GetRef.F90                   计算细化所需的非结构网格阈值文件
MOD_grid_preprocess.F90          网格角度检查
MOD_mask_postproc.F90            网格文件后处理
MOD_refine.F90                   三角形/多边形非结构网格细化
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

mkgrd.F90
    program main 主程序
    subroutine mode4mesh_make(inputfile, grid_select) ! 生成/读取经纬度网格或者兰伯特投影网格
    subroutine read_nl(nlfile) ! 从namelist中读入信息
    subroutine gridfile_write() ! 读取OLAM初始全球准均匀网格数据，并更换变量名，存入新的文件
    SUBROUTINE Mask_make(mask_select, type_select, mask_fprefix) ! 总控，控制*_mask_make
        分别用于不同形状的domain区域的确认
        subroutine bbox_mask_make(inputfile, mask_select) ! 矩形
        subroutine lamb_mask_make(inputfile, mask_select) ! 兰伯特投影的扇形
        subroutine circle_mask_make(inputfile, mask_select) ! 圆形
        subroutine close_mask_make(inputfile, mask_select) ! 闭合图形

    subroutine init_consts() ! 原始文件
    SUBROUTINE CHECK(STATUS) ! 检查文件状态
    SUBROUTINE voronoi() ! 原始文件
    SUBROUTINE pcvt() ! 原始文件
    subroutine grid_geometry_hex() ! 原始文件
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_Area_judge.F90 
    SUBROUTINE Area_judge() ! 总控，标记pixes是否在domain区域内，标记海陆pixes，读取阈值文件
    SUBROUTINE Area_judge_refine(iter) ! 用于指定细化的
    SUBROUTINE mask_patch_modify(type_select, iter)
        ! IsInArea_*_Calculation 标记pixes是否在refine/domain区域
        SUBROUTINE IsInArea_bbox_Calculation
        SUBROUTINE IsInArea_lambert_Calculation
        SUBROUTINE IsInArea_circle_Calculation
        SUBROUTINE IsInArea_close_Calculation
    SUBROUTINE ray_segment_intersect ! 获取两条线段的交点
    SUBROUTINE bubble_sort ! 冒泡排序
    SUBROUTINE check_self_intersection ! 使用平面几何中的 线段相交算法，通过叉积法判断两条线段是否相交
    LOGICAL function segments_intersect ! 检测线段是否自交
    Real(r8) function cross_product2 ! 计算叉积(四个输入参数)
    SUBROUTINE minmax_range_make ! 判断可以包含全部数据的最小矩形
    SUBROUTINE Source_Find ! 获取上下左右边界
    SUBROUTINE CheckCrossing ! 检测三角形的顶点经度是否跨越180度
    LOGICAL FUNCTION is_point_in_circle ! 根据距离判断点是否在圆内部
    REAL(r8) Function haversine ! 半正矢公式,计算球面距离
    LOGICAL FUNCTION is_point_in_convex_polygon ! 判断点是否在凸多边形内
    REAL FUNCTION cross_product ! 计算叉积(三个输入参数)
    !!!!!!!!!!!!!!!!!!!!!!! IsInArea_grid_* 可以考虑放置在MOD_file_preprocess.F90文件
    SUBROUTINE IsInArea_grid_Read ! mask_patch_on 为true的时候读取海陆标记/domain区域标记的文件
    SUBROUTINE IsInArea_grid_Save ! 保存海陆标记/domain区域标记的文件
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_data_preprocess.F90
    SUBROUTINE data_preprocess ! 读取土地利用类型landtypes, pixes的中心经度lon_i, 中心纬度lat_i, 边界经度lon_vertex, 边界纬度lat_vertex
    Threshold_Read_* 用于不同的网格种类对应的阈值数据集读取
        SUBROUTINE Threshold_Read_Lnd
        SUBROUTINE Threshold_Read_Ocn
        SUBROUTINE Threshold_Read_Earth
    data_read_* 读取单层/双层阈值数据集
        SUBROUTINE data_read_onelayer
        SUBROUTINE data_read_twolayer
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_file_preprocess.F90 ! 文件的读取保存
    SUBROUTINE MPAS_Mesh_Read
    SUBROUTINE MPAS_Mesh_Save
    SUBROUTINE Mode4_Mesh_Read
    SUBROUTINE Mode4_Mesh_Save
    SUBROUTINE Unstructured_Mesh_Read
    SUBROUTINE Unstructured_Mesh_Save
    SUBROUTINE bbox_Mesh_Read
    SUBROUTINE bbox_Mesh_Save
    SUBROUTINE circle_Mesh_Read
    SUBROUTINE circle_Mesh_Save
    SUBROUTINE close_Mesh_Read
    SUBROUTINE close_Mesh_Save
    SUBROUTINE Contain_Read
    SUBROUTINE Contain_Save
    SUBROUTINE earthmesh_info_save
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_GetContain.F90               
    SUBROUTINE  Get_Contain ! 包含关系计算的主要程序
    SUBROUTINE IsInArea_ustr_Calculation ! 判断非结构网格顶点是否位于细化区域/包含关系计算区域
    SUBROUTINE Contain_Calculation ! 获取在非结构网格内的pixes的行列编号和总数分别存在ustr_ii和ustr_id
    SUBROUTINE Data_Updata ! 获取非结构网格的最小矩形边框，以及最大的pixes数
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_GetRef.F90
    SUBROUTINE GetRef ! 总控程序，确定阈值细化的三角形个数
        ! GetRef_* 分别针对陆地/海洋/大气的阈值数据集进行计算
        SUBROUTINE GetRef_Lnd
        SUBROUTINE GetRef_Ocn
        SUBROUTINE GetRef_Earth
        ! mean_std_* 分别针对单层与双层阈值数据进行计算
        SUBROUTINE mean_std_cal2d
        SUBROUTINE mean_std_cal3d
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_grid_preprocess.F90
    SUBROUTINE grid_preprocess ! 总控程序，计算全局网格质量
    SUBROUTINE SpringAjustment_global ! 对于初始网格/外部读入的网格进行角度计算与统计
    SUBROUTINE SpringAjustment_refine ! 对于细化网格进行角度计算与统计
    SUBROUTINE TriMeshQuality ! 计算三角形的网格质量
    SUBROUTINE PolyMeshQuality ! 计算五六七边形的网格质量
    SUBROUTINE CheckLon ! 是否跨越180经线的判断
    SUBROUTINE GetTriangleLength ! 计算球面三角形边长
    SUBROUTINE GetAngle ! 适用于三角形与五六七边形的球面内角计算形式
    SUBROUTINE CheckCrossing ! 是否跨越180经线的判断
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_mask_postproc.F90
    SUBROUTINE mask_postproc
        ! mask_postproc_* 针对陆面/海洋/大气网格进行对应的后处理
        SUBROUTINE mask_postproc_Earth
        SUBROUTINE mask_postproc_Lnd
        SUBROUTINE mask_postproc_Ocn
    SUBROUTINE PatchID_Save ! 开始计算mpi模式所需的patchID文件
    SUBROUTINE Isolated_Ocean_Renew ! 去除孤立的海洋网格，确保海洋的连通性
    SUBROUTINE narrow_waterway_widen ! 去除单行的海洋网格
    SUBROUTINE bdy_connection ! 获取海洋网格边界信息（网格总数，分段数量，闭合曲线最长长度，海洋网格vertex编号）
    SUBROUTINE bdy_connection_closed_curve ! 获取闭合曲线的个数，长度等信息
    SUBROUTINE Data_Renew ! 修改非结构网格归属后，更新三角形/多边形网格个数/连接关系等信息
    SUBROUTINE Data_Finial ! 最终非结构网格归属后，更新三角形/多边形网格个数/连接关系等信息 
    SUBROUTINE IsInDmArea_ustr_Renew ! 去除虚假的海洋网格
    SUBROUTINE IsInDmArea_ustr_Renew_v2 ! 去除虚假的海洋网格
    SUBROUTINE bdy_calculation ! 获取海洋网格中的开边界与闭边界信息（have some bug）
    SUBROUTINE extract_unique_vertices ! 步骤1：提取唯一顶点编号
    SUBROUTINE sort_and_reindex ! 步骤2：排序并重新编号顶点
    subroutine quicksort_nonrecursive ! 步骤3：根据新的顶点编号重新编号中心点（快速排序）
    integer function partition ! 队列划分，用于快速排序算法
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

MOD_refine.F90                  
    SUBROUTINE refine_loop ! 总控程序，确认那些网格需要细化，并更新网格的连接关系
    INTEGER FUNCTION IsNgrmm ! 判断三角形的邻域关系
    SUBROUTINE GetTriangleDis ! 计算七边形与细化网格之间的距离
        ! 用于确定细化区域之间的三角形是否也需要细化
        SUBROUTINE iterB_judge
        SUBROUTINE iterC_judge
        SUBROUTINE iterD_judge
    SUBROUTINE OnedivideFour_connection ! 标记需要一分四细化的网格编号，更新连接关系
    SUBROUTINE OnedivideFour_renew ! 对网格进行一分四细化，生成新的三角形/多边形的顶点经纬度
    SUBROUTINE Array_length_calculation ! 确定halo所需要的网格个数，并确认最终*_new的数组长度
    SUBROUTINE bdy_connection_refine ! 创建ngrvv_refine数组，实现细化区域的外边界连接关系与分成若干闭合曲线
    SUBROUTINE ngrvv_refine_adjust ! 调整ngrvv_refine数组，有bug，后期会舍弃，采用新的ngrvv_refine数组调整方式
    SUBROUTINE bdy_connection_refine_closed_curve ! 获取细化边界闭合曲线的个数，长度等信息
    SUBROUTINE bdy_refine_segment_make ! 创建bdy_refine_segment实现数据分段
    SUBROUTINE weak_concav_segment_make ! 根据弱凹位置对bdy_refine_segment重新分段
    SUBROUTINE OnedivideTwo ! 对三角形网格进行一分二细化，更新连接关系，生成新的三角形/多边形的顶点经纬度
    SUBROUTINE ref_sjx_isreverse_judge ! 判断是否需要反向一分二细化
    SUBROUTINE weak_concav_special ! 要求在弱凹中，这里只针对弱凹两端都是1的情况的特殊处理代码
    SUBROUTINE sharp_concav_lop_judge ! 获取强凹分段中下一轮需要一分二细化的三角形
    SUBROUTINE m1w1_to_m11w11 ! 获取强凹分段中下一轮需要一分二细化的三角形的具体算法
    SUBROUTINE weak_concav_lop_judge ! 获取弱凹分段中下一轮需要一分二细化的三角形
    SUBROUTINE Delaunay_Lop ! 对角变换
    SUBROUTINE crossline_check ! 确保新生成的顶点不出现超过180度的情况
    SUBROUTINE NGR_RENEW ! 去除因为细化而不存在的三角形/多边形，更新编号与连接关系
    SUBROUTINE GetSort ! 对多边形顶点进行排序
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!